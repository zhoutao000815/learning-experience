//1936. 新增的最少台阶数
//给你一个 严格递增 的整数数组 rungs ，用于表示梯子上每一台阶的 高度 。当前你正站在高度为 0 的地板上，并打算爬到最后一个台阶。
//
//另给你一个整数 dist 。每次移动中，你可以到达下一个距离你当前位置（地板或台阶）不超过 dist 高度的台阶。当然，你也可以在任何正 整数 高度处插入尚不存在的新台阶。
//
//返回爬到最后一阶时必须添加到梯子上的 最少 台阶数。
//
//
//
//示例 1：
//
//输入：rungs = [1, 3, 5, 10], dist = 2
//输出：2
//解释：
//现在无法到达最后一阶。
//在高度为 7 和 8 的位置增设新的台阶，以爬上梯子。
//梯子在高度为[1, 3, 5, 7, 8, 10] 的位置上有台阶。
//示例 2：
//
//输入：rungs = [3, 6, 8, 10], dist = 3
//输出：0
//解释：
//这个梯子无需增设新台阶也可以爬上去。
//示例 3：
//
//输入：rungs = [3, 4, 6, 7], dist = 2
//输出：1
//解释：
//现在无法从地板到达梯子的第一阶。
//在高度为 1 的位置增设新的台阶，以爬上梯子。
//梯子在高度为[1, 3, 4, 6, 7] 的位置上有台阶。
//示例 4：
//
//输入：rungs = [5], dist = 10
//输出：0
//解释：这个梯子无需增设新台阶也可以爬上去。
//
//
//提示：
//
//1 <= rungs.length <= 105
//1 <= rungs[i] <= 109
//1 <= dist <= 109
//rungs 严格递增
//
//来源：力扣（LeetCode）
//链接：https ://leetcode-cn.com/problems/add-minimum-number-of-rungs
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//思路：贪心法，尽可能的少添加台阶。
class Solution {
public:
	int addRungs(vector<int>& rungs, int dist) {
		int cur = 0;
		int addres = 0;
		for (int i = 0; i<rungs.size(); i++)
		{
			if (cur + dist >= rungs[i])                   //直接能跳到，不添加台阶。   
			{
				cur = rungs[i];
			}
			else
			{
				int addrung = (rungs[i] - cur) / dist;                //因为可能会需要多个台阶，所以尽可能的将添加的台阶设高一点。
																	  //如果有余数，最后一个添加的台阶必然大于目标台阶， 能一步跳上去。
				if ((rungs[i] - cur) % dist == 0)					  //反之没有余数，说明在添加的倒数第二个台阶时，就已经能一步跳上去了，所以减去一个台阶数。
					addrung -= 1;
				addres += addrung;
				cur = rungs[i];										  //尽可能的利用已经有的台阶，从而减少添加台阶。
			}
		}
		return addres;
	}
};