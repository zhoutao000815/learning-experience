//剑指 Offer 60. n个骰子的点数
//把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
//
//
//
//你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
//
//
//
//示例 1:
//
//输入 : 1
//输出 : [0.16667, 0.16667, 0.16667, 0.16667, 0.16667, 0.16667]
//	 示例 2 :
//
// 输入 : 2
//  输出 : [0.02778, 0.05556, 0.08333, 0.11111, 0.13889, 0.16667, 0.13889, 0.11111, 0.08333, 0.05556, 0.02778]
//
//
//	   限制：
//
//	   1 <= n <= 11

	//	来源：力扣（LeetCode）
	//链接：https ://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof
	//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
	vector<double> dicesProbability(int n) {
		//由于骰子之间互不影响，一次扔n个，n次扔一个，统计点数和的效果是一样的。
		//一次扔n颗难分析，我们采用n次扔一颗，在上一次扔出结果的基础上分析。

		//两个问题，每多扔一个，点数怎么变化；概率怎么计算？
		//问题1：
		//扔一个，点数[1,6]，概率都为1/6.
		//扔第二个，点数[2.12],每多扔一颗，点数变为[n,6n]

		//问题2：
		//在扔了第一个基础上，扔第二个时，假设点数从1到6，
		//第二个骰子为1的概率为1/6，点数和变为[2,7],并且只是在第一个骰子的概率基础之上，*（1/6），结果就是第二个骰子为1时的概率分析
		//第二个骰子为2的概率为1/6，点数和变为[3,8],并且只是在第一个骰子的概率基础之上，*（1/6），结果就是第二个骰子为2时的概率分析
		//。。。
		//第二个骰子为6的概率为1/6，点数和变为[7,12],并且只是在第一个骰子的概率基础之上，*（1/6），结果就是第二个骰子为6时的概率分析
		//把这六种分析的情况，按点数和相同的加起来（），就是一次扔两个的点数和概率分析。

		//扔第三个时，在扔两个的概率基础上分析，依次类推，得出结果。

		vector<double> rel(6, 1.0 / 6.0);//第一个骰子为初始状态
		for (int i = 1; i<n; i++) //从第二个骰子开始
		{
			vector<double> relnext(6 + i * 5);  //扔1+i个骰子时，点数和的情况个数变化

			for (int j = 0; j<rel.size(); j++) //原点数和基础上，依次分析下一个筛子从1到6时，概率变化。
			{
				for (int k = 0; k<6; k++) //下一个骰子的六种情况
				{
					relnext[j + k] += rel[j] / 6.0;   //不必非要全部分析完再按点数和相同的加起来，在提前开好的relnext空间里，累计即可。
				}
			}
			rel = relnext;
		}
		return rel;
	}
};